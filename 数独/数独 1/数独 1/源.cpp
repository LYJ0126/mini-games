//法一：深搜

#include <iostream>
#include <algorithm>
#include <cstring>
#include <cmath>

using namespace std;

int a[9][9], l[9][10], c[9][10], s[3][3][10], solved;
//a这个数组里面的每一行，每一列都是从0到8
/*a[9][9]保存开始的题目，0’表示该处为空，需要填数
* l[9][10] 保存每一行哪些数是已经填了，哪些没有
* c[9][10] 保存每一列哪些数是已经填了，哪些没有
* s[3][3][10] 保存每一个九宫格里哪些数已经填了，哪些没有
* solved 表示是否找出了一组解（是否有解）
*/
void solve(int cur) {
   //如果已经解决，输出这些数
    if (solved == 1) return;
    else if (cur == 81) {
        solved = 1;
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                cout << a[i][j] << " \n"[j == 8];
            }
        }
        return;
    }
    //a[cur/9][cur%9]表示cur这个数目前的位置
    else if (a[cur / 9][cur % 9] != 0) {
        solve(cur + 1);
        //如果cur这个数不等于0（已经有数），解决下一个数
    }
    //深搜
    else {
        //从1到9尝试，如果cur所在的行，列及九宫格中，都没出现i这个数，那么填入i，再进行下一个数的solve过程
        for (int i = 1; i <= 9; i++) {
            if (l[cur / 9][i] == 0 && c[cur % 9][i] == 0 && s[cur / 27][(cur % 9) / 3][i] == 0) {
                l[cur / 9][i]++;
                c[cur % 9][i]++;
                s[cur / 27][(cur % 9) / 3][i]++;
                a[cur / 9][cur % 9] = i;
                solve(cur + 1);
                //回溯
                l[cur / 9][i]--;
                c[cur % 9][i]--;
                s[cur / 27][(cur % 9) / 3][i]--;
                a[cur / 9][cur % 9] = 0;
            }
        }
    }
    return;
}

int main() {
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            cin >> a[i][j];
            if (a[i][j] != 0) {
                //如果a[i][j]不等于0，那么对行，列，九宫格这3个数组相应位置进行标记
                l[i][a[i][j]]++;
                c[j][a[i][j]]++;
                s[i / 3][j / 3][a[i][j]]++;
            }
        }
    }
    solved = 0;
    solve(0);
    return 0;
}

/*测试样例：
1.
8 0 0 0 0 0 0 0 0 
0 0 3 6 0 0 0 0 0 
0 7 0 0 9 0 2 0 0 
0 5 0 0 0 7 0 0 0 
0 0 0 0 4 5 7 0 0 
0 0 0 1 0 0 0 3 0 
0 0 1 0 0 0 0 6 8 
0 0 8 5 0 0 0 1 0 
0 9 0 0 0 0 4 0 0
答案：
8 1 2 7 5 3 6 4 9 
9 4 3 6 8 2 1 7 5 
6 7 5 4 9 1 2 8 3 
1 5 4 2 3 7 8 9 6 
3 6 9 8 4 5 7 2 1 
2 8 7 1 6 9 5 3 4 
5 2 1 9 7 4 3 6 8 
4 3 8 5 2 6 9 1 7 
7 9 6 3 1 8 4 5 2
2.（这个就不行）
9 0 0 8 0 0 0 0 0
0 0 0 0 0 0 5 0 0
0 0 0 0 0 0 0 0 0
0 2 0 0 1 0 0 0 3
0 1 0 0 0 0 0 6 0
0 0 0 4 0 0 0 7 0
7 0 8 6 0 0 0 0 0
0 0 0 0 3 0 1 0 0
4 0 0 0 0 0 2 0 0
答案：
9 7 2 8 5 3 6 1 4
1 4 6 2 7 9 5 3 8
5 8 3 1 4 6 7 2 9
6 2 4 7 1 8 9 5 3
8 1 7 3 9 5 4 6 2
3 5 9 4 6 2 8 7 1
7 9 8 6 2 1 3 4 5
2 6 5 9 3 4 1 8 7
4 3 1 5 8 7 2 9 6
*/